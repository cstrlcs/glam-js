import type { SourceInfo } from "./types";
import { getSourceInfoElements } from "./extractor";
import types from "./types.json";
import { Eta } from "eta";

enum ExportPaths {
	Index = "src/index.ts",
	Docs = "DOCS.md",
}

enum TemplatePaths {
	Index = "./templates/index.eta",
	Docs = "./templates/docs.eta",
}

const eta = new Eta({
	views: import.meta.dir,
	autoEscape: false,
	functionHeader:
		"const warn = 'Do not edit this file directly. Edit the template instead: `codegen/<template>`.'",
});

const build = () => {
	const sourceInfos: SourceInfo[] = [];

	for (const type of types) {
		const { name, length, description, template } = type;
		const path = `src/${name}${length}.ts`;

		const renderedSourceCode = eta.render(template, type);
		const elements = getSourceInfoElements(path);

		Bun.write(path, renderedSourceCode);

		sourceInfos.push({
			name,
			description,
			elements,
		});
	}

	const renderedIndex = eta.render(TemplatePaths.Index, types);
	const renderedDocs = eta.render(TemplatePaths.Docs, sourceInfos);

	Bun.write(ExportPaths.Index, renderedIndex);
	Bun.write(ExportPaths.Docs, renderedDocs);
};

build();
